{"version":3,"sources":["components/SlidePuzzle/greatWave.jpg","store/defaults.ts","store/reducers.ts","store/actionTypes.ts","store/store.ts","styles.ts","store/selectors.ts","components/PuzzlePiece/styles.ts","components/PuzzlePiece/PuzzlePiece.tsx","common/nPiecePuzzleUtility.ts","store/actions.ts","components/SlidePuzzle/styles.ts","components/SlidePuzzle/SlidePuzzle.tsx","components/Settings/styles.ts","components/Settings/Settings.tsx","components/SquaredGallery/styles.ts","components/SquaredGallery/SquaredGallery.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","puzzleStateDefault","pieces","key","position","x","y","activePiecePosition","adjacentToActive","isSolved","userConfigDefault","showHints","size","combineReducers","userConfigurationReducer","state","action","type","payload","puzzleReducer","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","useStyles","createUseStyles","AppContainer","display","flexWrap","justifyContent","alignItems","width","height","backgroundColor","overflowX","padding","AppTitle","fontWeight","fontSize","color","marginBottom","textAlign","getPiecesSelector","store","getActivePieceSelector","getAdjacentToActiveSelector","isSolvedSelector","showHintsSelector","puzzleSizeSelector","puzzlePiece","placeItems","transition","borderRadius","opacity","overflow","active","adjacent","content","contentContainer","top","left","userSelect","hideHints","PuzzlePiece","pos","bgStyles","movePieceCallback","isAdjacentPiece","isActivePiece","shouldShowHints","useSelector","className","style","onClick","e","shufflePieces","board","newPositions","length","push","shuffledPositions","shuffle","newBoard","map","element","index","isBoardSolvable","makeBoardSolvable","getFullBoardData","newActivePieceIndex","findActivePieceInBoard","findAdjacentsToActive","isBoardSolved","keyOnePosition","findIndex","keyTwoPosition","swapTwoPieces","Math","sqrt","adjacents","isOdd","number","activePiece","boardInversions","activePieceKey","invCount","i","j","getInversionsInBoard","areBoardInversionsOdd","activePieceRow","pieceA","pieceB","newPiecePositions","pieceKey","getXYFromPosition","floor","boardStateAction","newState","slidePuzzle","border","textTransform","margin","right","zIndex","transform","pointerEvents","solvedPuzzle","backgroundStyle","SlidePuzzle","dispatch","useDispatch","selectors","useState","isBgHorizontal","setIsBgHorizontal","containerSize","setContainerSize","backgroundRef","useRef","galleryRef","responsiveSizeUpdate","current","offsetWidth","throttledUpdate","useCallback","debounce","useLayoutEffect","addEventListener","updateBoard","piece","movePiece","useEffect","totalPieces","newPieces","n","newPiece","prepNewShuffledBoard","generatePieceStyle","availableSize","bgSizeStyle","perPieceSize","originalXY","backgroundImage","bgImage","backgroundSize","backgroundPosition","ref","columns","elements","shouldHide","id","order","hidden","toString","includes","src","onLoad","bgWidth","bgHeight","alt","settingsWrapper","field","shuffleButton","cursor","Settings","props","puzzleSize","sizeSlider","throttledSizeChange","parseInt","value","name","checked","onChange","handleHintsChange","target","htmlFor","min","max","placeholder","handleSizeChange","galleryContainer","galleryItem","SquaredGallery","containerElement","columnSize","setColumnSize","li","duration","animate","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.464d086f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/greatWave.bf385690.jpg\";","import { IPuzzleState } from '../common/interfaces';\r\n\r\ninterface IUserConfiguration {\r\n  showHints: boolean,\r\n  size: number\r\n}\r\n\r\nexport const puzzleStateDefault: IPuzzleState = {\r\n  pieces: [\r\n    { key: 0, position: { x: 0, y: 0 } },\r\n    { key: 1, position: { x: 1, y: 0 } },\r\n    { key: 2, position: { x: 2, y: 0 } },\r\n    { key: 3, position: { x: 3, y: 0 } },\r\n    { key: 4, position: { x: 0, y: 1 } },\r\n    { key: 5, position: { x: 1, y: 1 } },\r\n    { key: 6, position: { x: 2, y: 1 } },\r\n    { key: 7, position: { x: 3, y: 1 } },\r\n    { key: 8, position: { x: 0, y: 2 } },\r\n    { key: 9, position: { x: 1, y: 2 } },\r\n    { key: 10, position: { x: 2, y: 2 } },\r\n    { key: 11, position: { x: 3, y: 2 } },\r\n    { key: 12, position: { x: 0, y: 3 } },\r\n    { key: 13, position: { x: 1, y: 3 } },\r\n    { key: 14, position: { x: 2, y: 3 } },\r\n    { key: 15, position: { x: 3, y: 3 } }\r\n  ],\r\n  activePiecePosition: 15,\r\n  adjacentToActive: [11, 14],\r\n  isSolved: false\r\n}\r\n\r\nexport const userConfigDefault: IUserConfiguration = {\r\n  showHints: true,\r\n  size: 4\r\n} \r\n","import { combineReducers } from \"redux\";\r\n\r\nimport * as types from './actionTypes'\r\nimport { IMoveActivePieceAction, userConfigTypes } from './actions'\r\nimport { puzzleStateDefault, userConfigDefault } from './defaults'\r\nimport { IPuzzleState, IUserConfig } from '../common/interfaces';\r\n\r\nconst puzzleReducer = (state: IPuzzleState = puzzleStateDefault, action: IMoveActivePieceAction) => {\r\n  switch (action.type) {\r\n    case types.UPDATE_BOARD: {\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst userConfigurationReducer = (state: IUserConfig = userConfigDefault, action: userConfigTypes) => {\r\n  switch (action.type) {\r\n    case types.SET_HINTS_VISIBILITY: {\r\n      return {\r\n        ...state,\r\n        showHints: action.payload\r\n      }\r\n    }\r\n    case types.SET_PUZZLE_SIZE: {\r\n      return {\r\n        ...state,\r\n        size: action.payload\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default combineReducers({ userConfigurationReducer, puzzleReducer });\r\n","export const UPDATE_BOARD = \"UPDATE_BOARD\";\r\nexport const SET_HINTS_VISIBILITY = \"SET_HINTS_VISIBILITY\";\r\nexport const SET_PUZZLE_SIZE = \"SET_PUZZLE_SIZE\";\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\nimport { IPuzzleState, IUserConfig } from '../common/interfaces';\r\n\r\nexport interface IFullStoreState {\r\n  puzzleReducer: IPuzzleState,\r\n  userConfigurationReducer: IUserConfig\r\n}\r\n\r\nexport default createStore(rootReducer, (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__());\r\n","import { createUseStyles } from 'react-jss'\n\nconst useStyles = createUseStyles({\n  AppContainer: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100vw',\n    height: '100vh',\n    backgroundColor: '#1D4E89',\n    overflowX: 'hidden',\n    padding: '50px 0'\n  },\n  AppTitle:{\n    fontWeight: 700,\n    width: '90vw',\n    fontSize: '2vw',\n    color: 'white',\n    marginBottom: '30px',\n    textAlign: 'center'\n  }\n})\n\nexport default useStyles;\n","import { IFullStoreState } from './store';\r\n\r\nexport const getPiecesSelector = (store: IFullStoreState) => store.puzzleReducer.pieces;\r\nexport const getActivePieceSelector = (store: IFullStoreState) => store.puzzleReducer.activePiecePosition;\r\nexport const getAdjacentToActiveSelector = (store: IFullStoreState) => store.puzzleReducer.adjacentToActive;\r\nexport const isSolvedSelector = (store: IFullStoreState) => store.puzzleReducer.isSolved;\r\n\r\nexport const showHintsSelector = (store: IFullStoreState) => store.userConfigurationReducer.showHints;\r\nexport const puzzleSizeSelector = (store: IFullStoreState) => store.userConfigurationReducer.size;\r\n","import { createUseStyles } from 'react-jss'\r\n\r\nconst useStyles = createUseStyles({\r\n  puzzlePiece: {\r\n    width: '100%',\r\n    height: '100%',\r\n    backgroundColor: '#FBD1A2',\r\n    display: 'grid',\r\n    placeItems: 'center',\r\n    transition: 'all 0.3s',\r\n    position: 'relative',\r\n    borderRadius: 6,\r\n    opacity: 1,\r\n    overflow: 'hidden'\r\n  },\r\n  active: {\r\n  },\r\n  adjacent: {\r\n    '&:after': {\r\n      width: '100%',\r\n      height: '100%',\r\n      position: 'absolute',\r\n      backgroundColor: 'rgba(255, 255, 255, 0.0)',\r\n      content: '\"\"',\r\n      display: \"block\",\r\n      transition: 'background-color 0.4s'\r\n    },\r\n    '&:hover:after': {\r\n      backgroundColor: 'rgba(255, 255, 255, 0.5)',\r\n    }\r\n  },\r\n  contentContainer: {\r\n    position: 'absolute',\r\n    top: 20,\r\n    left: 20,\r\n    fontSize: 15,\r\n    fontWeight: 700,\r\n    backgroundColor: '#00B2CA',\r\n    borderRadius: 20,\r\n    width: 40,\r\n    height: 40,\r\n    display: 'grid',\r\n    placeItems: 'center',\r\n    color: 'white',\r\n    userSelect: 'none',\r\n    opacity: 1,\r\n    transition: 'all 0.2s'\r\n  },\r\n  hideHints: {\r\n    '& $contentContainer': {\r\n      opacity: 0,\r\n    }\r\n  }\r\n})\r\n\r\nexport default useStyles;\r\n","import React, { MouseEvent, CSSProperties } from 'react'\r\nimport { useSelector } from \"react-redux\";\r\nimport { showHintsSelector } from '../../store/selectors';\r\n\r\n\r\nimport useStyles from './styles';\r\n\r\ninterface IPuzzlePieceProps {\r\n  pos: number,\r\n  content: string,\r\n  movePieceCallback: (x: number) => void,\r\n  isActivePiece: boolean,\r\n  isAdjacentPiece: boolean,\r\n  bgStyles?: CSSProperties,\r\n}\r\n\r\nconst PuzzlePiece = ({ pos, content, bgStyles, movePieceCallback, isAdjacentPiece, isActivePiece }: IPuzzlePieceProps) => {\r\n  const shouldShowHints = useSelector(showHintsSelector);\r\n\r\n  const handleClick = (e: MouseEvent) => {\r\n    if (isAdjacentPiece) movePieceCallback(pos);\r\n  }\r\n\r\n  const {\r\n    puzzlePiece,\r\n    adjacent,\r\n    active,\r\n    contentContainer,\r\n    hideHints\r\n  } = useStyles();\r\n\r\n  return (\r\n    <div\r\n      className={`${puzzlePiece} ${isAdjacentPiece && adjacent} ${isActivePiece && active} ${!shouldShowHints && hideHints}`}\r\n      style={bgStyles}\r\n      onClick={handleClick}\r\n    >\r\n      <div\r\n        className={contentContainer}\r\n      >\r\n        {\r\n          content\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PuzzlePiece;\r\n","import { IPieceState, IXYPosition, IPuzzleState } from './interfaces'\r\nimport { shuffle } from 'lodash'\r\n\r\nexport const shufflePieces = (board: IPieceState[]): IPieceState[] => {\r\n  const newPositions = [];\r\n  for (let e = 0; e < board.length; e++) newPositions.push(e)\r\n  const shuffledPositions = shuffle(newPositions);\r\n  const newBoard = board.map((element, index) => {\r\n    return { ...element, key: shuffledPositions[index] }\r\n  });\r\n\r\n  if (!isBoardSolvable(newBoard)) {\r\n    return (makeBoardSolvable(newBoard));\r\n  }\r\n\r\n  return newBoard;\r\n}\r\n\r\nexport const prepNewShuffledBoard = (size: number): IPieceState[] => {\r\n  const totalPieces = size * size;\r\n  const newPieces = [];\r\n  for (let n = 0; n < totalPieces; n++) {\r\n    const newPiece = {\r\n      key: n,\r\n      position: getXYFromPosition(n, size)\r\n    }\r\n    newPieces.push(newPiece)\r\n  }\r\n  return shufflePieces(newPieces);\r\n}\r\n\r\nexport const getFullBoardData = (board: IPieceState[], size?: number): IPuzzleState => {\r\n  const newActivePieceIndex = findActivePieceInBoard(board);\r\n\r\n  return {\r\n    pieces: board,\r\n    adjacentToActive: findAdjacentsToActive(board, newActivePieceIndex, size),\r\n    activePiecePosition: newActivePieceIndex,\r\n    isSolved: isBoardSolved(board)\r\n  }\r\n}\r\n\r\nconst makeBoardSolvable = (board: IPieceState[]): IPieceState[] => {\r\n  const keyOnePosition = board.findIndex(element => element.key === 1);\r\n  const keyTwoPosition = board.findIndex(element => element.key === 2);\r\n  return swapTwoPieces(board, keyOnePosition, keyTwoPosition)\r\n}\r\n\r\nexport const isBoardSolved = (board: IPieceState[]): boolean => {\r\n  for (let e = 0; e < board.length; e++) {\r\n    if (board[e].key !== e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport const findActivePieceInBoard = (board: IPieceState[]): number => {\r\n  return board.findIndex(e => e.key === board.length - 1);\r\n}\r\n\r\nexport const findAdjacentsToActive = (board: IPieceState[], activePiecePosition?: number, size?: number): number[] => {\r\n  size = size || Math.sqrt(board.length);\r\n  activePiecePosition = activePiecePosition ? activePiecePosition : findActivePieceInBoard(board);\r\n  const newActivePieceIndex = findActivePieceInBoard(board);\r\n  const { x, y } = board[activePiecePosition].position;\r\n  const adjacents = [];\r\n\r\n  // If not on top row, add the cell directly above. \r\n  if (y > 0) {\r\n    adjacents.push(newActivePieceIndex - size)\r\n  }\r\n  // Bottom\r\n  if (y < size - 1) {\r\n    adjacents.push(newActivePieceIndex + size)\r\n  }\r\n  // Right\r\n  if (!((x % size) === size - 1)) {\r\n    adjacents.push(newActivePieceIndex + 1)\r\n  }\r\n  //Left\r\n  if (x % size) {\r\n    adjacents.push(newActivePieceIndex - 1)\r\n  }\r\n\r\n  return adjacents\r\n}\r\n\r\nconst getInversionsInBoard = (board: IPieceState[]): number => {\r\n  const activePieceKey = board.length - 1;\r\n  let invCount = 0;\r\n  for (let i = 0; i < board.length; i++) {\r\n    for (let j = i + 1; j < board.length; j++) {\r\n      if ((board[i].key !== activePieceKey) && (board[j].key !== activePieceKey) && board[i].key > board[j].key) invCount++\r\n    }\r\n  }\r\n  return invCount;\r\n}\r\n\r\nconst isOdd = (number: number): boolean => {\r\n  return !!(number % 2)\r\n}\r\n\r\nconst isBoardSolvable = (board: IPieceState[], activePiecePosition?: number, size?: number): boolean => {\r\n  // https://www.cs.bham.ac.uk/~mdr/teaching/modules04/java2/TilesSolvability.html\r\n\r\n  size = size || Math.sqrt(board.length);\r\n  const activePiece = activePiecePosition ? board[activePiecePosition] : board[findActivePieceInBoard(board)];\r\n  const boardInversions = getInversionsInBoard(board);\r\n  const areBoardInversionsOdd = isOdd(boardInversions);\r\n  const activePieceRow = activePiece.position.y + 1;\r\n\r\n  if (isOdd(size)) {\r\n    if (!isOdd(boardInversions)) return true;\r\n  } else {\r\n    if (isOdd(size - activePieceRow)) {\r\n      if (areBoardInversionsOdd) return true;\r\n    } else {\r\n      if (!areBoardInversionsOdd) return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nconst swapTwoPieces = (board: IPieceState[], pieceA: number, pieceB: number): IPieceState[] => {\r\n  const newPiecePositions = [...board];\r\n\r\n  const pieceKey = newPiecePositions[pieceA].key;\r\n  const activePieceKey = newPiecePositions[pieceB].key;\r\n\r\n  newPiecePositions[pieceB].key = pieceKey;\r\n  newPiecePositions[pieceA].key = activePieceKey;\r\n\r\n  return newPiecePositions;\r\n}\r\n\r\nexport const movePiece = (board: IPieceState[], piece: number, activePiecePosition?: number): IPieceState[] => {\r\n  activePiecePosition = activePiecePosition ? activePiecePosition : findActivePieceInBoard(board);\r\n\r\n  return swapTwoPieces(board, piece, activePiecePosition);\r\n}\r\n\r\nexport const getXYFromPosition = (position: number, size: number): IXYPosition => {\r\n  return {\r\n    x: position % size,\r\n    y: Math.floor(position / size)\r\n  }\r\n}\r\n","import { IPuzzleState } from '../common/interfaces';\r\n\r\nimport * as types from './actionTypes'\r\n\r\ninterface IBasicAction {\r\n  type: string\r\n}\r\n\r\nexport interface IMoveActivePieceAction extends IBasicAction {\r\n  payload: IPuzzleState\r\n}\r\n\r\nexport interface IUpdateHintsVisibilityAction extends IBasicAction {\r\n  payload: boolean\r\n}\r\n\r\nexport interface ISetPuzzleSizeAction extends IBasicAction {\r\n  payload: number\r\n}\r\n\r\nexport const boardStateAction = (newState: IPuzzleState): IMoveActivePieceAction => {\r\n  return {\r\n    type: types.UPDATE_BOARD,\r\n    payload: newState\r\n  }\r\n}\r\n\r\nexport const setHintsVisibilityAction = (newSize: boolean): IUpdateHintsVisibilityAction => {\r\n  return {\r\n    type: types.SET_HINTS_VISIBILITY,\r\n    payload: newSize\r\n  }\r\n}\r\n\r\nexport const setPuzzleSizeAction = (newSize: number): ISetPuzzleSizeAction => {\r\n  return {\r\n    type: types.SET_PUZZLE_SIZE,\r\n    payload: newSize\r\n  }\r\n}\r\n\r\nexport type userConfigTypes = IUpdateHintsVisibilityAction | ISetPuzzleSizeAction;\r\n","import { createUseStyles } from 'react-jss'\r\n\r\nconst useStyles = createUseStyles({\r\n  slidePuzzle: {\r\n    width: '90vmin',\r\n    height: '90vmin',\r\n    border: 'solid 0px white',\r\n    transition: 'all 0.4s',\r\n    position: 'relative',\r\n    '&:before': {\r\n      content: '\"you solved it my dude!\"',\r\n      textTransform: 'uppercase',\r\n      position: 'absolute',\r\n      margin: 'auto',\r\n      top: '-3%',\r\n      right: '-3%',\r\n      color: 'white',\r\n      fontSize: '2vw',\r\n      fontWeight: 700,\r\n      width: '25%',\r\n      height: '25%',\r\n      display: 'grid',\r\n      placeItems: 'center',\r\n      zIndex: 3,\r\n      transition: 'all 0.4s',\r\n      textAlign: 'center',\r\n      opacity: 0,\r\n      transform: 'rotate(-120deg)',\r\n      backgroundColor: '#F79256',\r\n      borderRadius: 30,\r\n      pointerEvents: 'none'\r\n    },\r\n  },\r\n  solvedPuzzle: {\r\n    '&:before': {\r\n      opacity: 1,\r\n      transform: 'rotate(-10deg)',\r\n    }\r\n  },\r\n  backgroundStyle: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    opacity: 0,\r\n    zIndex: 99,\r\n    pointerEvents: 'none',\r\n    display: 'none'\r\n  }\r\n})\r\n\r\nexport default useStyles;\r\n","import React, { useEffect, useCallback, CSSProperties, useRef, useState, useLayoutEffect } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { debounce } from 'lodash'\r\n\r\nimport {\r\n  movePiece,\r\n  getFullBoardData,\r\n  getXYFromPosition,\r\n  prepNewShuffledBoard\r\n} from '../../common/nPiecePuzzleUtility'\r\nimport { IPieceState } from '../../common/interfaces'\r\nimport * as selectors from '../../store/selectors';\r\nimport { boardStateAction } from '../../store/actions';\r\nimport { PuzzlePiece, SquaredGallery, IGalleryElement } from '../'\r\n\r\nimport useStyles from './styles';\r\nimport bgImage from './greatWave.jpg'\r\n\r\nconst SlidePuzzle = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const pieces = useSelector(selectors.getPiecesSelector);\r\n  const activePiecePosition = useSelector(selectors.getActivePieceSelector);\r\n  const adjacentToActive = useSelector(selectors.getAdjacentToActiveSelector);\r\n  const isSolved = useSelector(selectors.isSolvedSelector);\r\n  const size = useSelector(selectors.puzzleSizeSelector);\r\n\r\n  const [isBgHorizontal, setIsBgHorizontal] = useState<boolean>(true);\r\n  const [containerSize, setContainerSize] = useState<number>(0)\r\n\r\n  const backgroundRef = useRef<HTMLImageElement>(null)\r\n  const galleryRef = useRef<HTMLDivElement>(null)\r\n\r\n  const {\r\n    slidePuzzle,\r\n    solvedPuzzle,\r\n    backgroundStyle\r\n  } = useStyles();\r\n\r\n  // Handle window resizes\r\n  const responsiveSizeUpdate = () => {\r\n    setContainerSize(galleryRef.current?.offsetWidth || 0);\r\n  }\r\n\r\n  const throttledUpdate = useCallback(debounce(() => {\r\n    responsiveSizeUpdate()\r\n  }, 200), [])\r\n\r\n  useLayoutEffect(() => {\r\n    responsiveSizeUpdate();\r\n\r\n    const handleResize = () => {\r\n      throttledUpdate()\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize)\r\n  }, [])\r\n\r\n  // Callbacks for interaction\r\n  const updateBoard = useCallback((newBoard: IPieceState[]): void => {\r\n    dispatch(boardStateAction(getFullBoardData(newBoard)))\r\n  }, [dispatch])\r\n\r\n  const movePieceCallback = (x: number): void => {\r\n    updateBoard(movePiece(pieces, x, activePiecePosition))\r\n  }\r\n\r\n  // If puzzle size in N length changes, generate a new board.\r\n  useEffect(() => {\r\n    updateBoard(prepNewShuffledBoard(size))\r\n  }, [size, updateBoard]);\r\n\r\n\r\n  const measureRef = (): void => {\r\n    if (backgroundRef.current) {\r\n      const bgWidth = backgroundRef.current.width;\r\n      const bgHeight = backgroundRef.current.height;\r\n      setIsBgHorizontal(!!(bgWidth >= bgHeight))\r\n    }\r\n  }\r\n\r\n  const generatePieceStyle = useCallback((key: number): CSSProperties => {\r\n    let availableSize = 0;\r\n    if (galleryRef.current) availableSize = galleryRef.current.offsetWidth\r\n    const bgSizeStyle = isBgHorizontal ? `auto ${availableSize}px` : `${availableSize}px auto`;\r\n    const perPieceSize = availableSize / size;\r\n    const originalXY = getXYFromPosition(key, size);\r\n\r\n    return {\r\n      backgroundImage: `url(${bgImage})`,\r\n      backgroundSize: bgSizeStyle,\r\n      backgroundPosition: `-${perPieceSize * originalXY.x}px -${perPieceSize * originalXY.y}px`\r\n    }\r\n  }, [size, containerSize, isBgHorizontal])\r\n\r\n  const formGalleryElements = (): IGalleryElement[] => {\r\n    return pieces.map((element, index) => {\r\n      const { key } = element;\r\n      const isActivePiece = (index === activePiecePosition);\r\n      const shouldHide = isActivePiece && !isSolved;\r\n      return {\r\n        id: `element${key}`,\r\n        order: index,\r\n        hidden: shouldHide,\r\n        element: (\r\n          <PuzzlePiece\r\n            pos={index}\r\n            content={(element.key + 1).toString()}\r\n            movePieceCallback={movePieceCallback}\r\n            isActivePiece={isActivePiece}\r\n            isAdjacentPiece={adjacentToActive.includes(index)}\r\n            bgStyles={generatePieceStyle(element.key)}\r\n          />\r\n        )\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`${slidePuzzle} ${isSolved ? solvedPuzzle : null}`}\r\n      ref={galleryRef}\r\n    >\r\n      <SquaredGallery\r\n        columns={size}\r\n        elements={formGalleryElements()}\r\n        containerSize={containerSize}\r\n      />\r\n      <img\r\n        className={backgroundStyle}\r\n        src={bgImage}\r\n        ref={backgroundRef}\r\n        onLoad={measureRef}\r\n        alt='Background Reference'\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default SlidePuzzle;\r\n","import { createUseStyles } from 'react-jss'\r\n\r\nconst useStyles = createUseStyles({\r\n  settingsWrapper: {\r\n    padding: 30,\r\n    color: 'white',\r\n    '& label': {\r\n      userSelect: 'none'\r\n    }\r\n  },\r\n  field: {\r\n    margin: '30px 0'\r\n  },\r\n  shuffleButton: {\r\n    padding: '20px 40px',\r\n    backgroundColor: '#7DCFB6',\r\n    textAlign: 'center',\r\n    textTransform: 'uppercase',\r\n    fontSize: 30,\r\n    fontWeight: 700,\r\n    borderRadius: 2,\r\n    userSelect: 'none',\r\n    cursor: 'pointer'\r\n  },\r\n})\r\n\r\nexport default useStyles;\r\n","import React, { useCallback, useRef, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { debounce } from 'lodash'\r\n\r\nimport { boardStateAction, setHintsVisibilityAction, setPuzzleSizeAction } from '../../store/actions'\r\nimport { getPiecesSelector, showHintsSelector, puzzleSizeSelector } from '../../store/selectors'\r\nimport { shufflePieces, getFullBoardData } from '../../common/nPiecePuzzleUtility'\r\nimport useStyles from './styles';\r\n\r\ninterface ISettingsProps {\r\n}\r\n\r\nconst Settings = (props: ISettingsProps) => {\r\n  const dispatch = useDispatch();\r\n  const pieces = useSelector(getPiecesSelector);\r\n  const showHints = useSelector(showHintsSelector);\r\n  const puzzleSize = useSelector(puzzleSizeSelector);\r\n  const sizeSlider = useRef<HTMLInputElement>(null);\r\n\r\n  const handleShuffle = () => {\r\n    dispatch(boardStateAction(getFullBoardData(shufflePieces(pieces))))\r\n  }\r\n\r\n  const handleHintsChange = (e: boolean) => {\r\n    dispatch(setHintsVisibilityAction(e))\r\n  }\r\n\r\n  const handleSizeChange = (e: number) => {\r\n    throttledSizeChange(e)\r\n  }\r\n\r\n  const throttledSizeChange = useCallback(debounce((e) => {\r\n    if (sizeSlider.current) {\r\n      dispatch(setPuzzleSizeAction(parseInt(sizeSlider.current.value)))\r\n    }\r\n  }, 300), [])\r\n\r\n  useEffect(() => {\r\n    // Since we're using an uncontrolled input for throttling\r\n    // set the value of the range at the start.\r\n    if (sizeSlider.current) {\r\n      sizeSlider.current.value = puzzleSize.toString();\r\n    }\r\n  }, [puzzleSize])\r\n\r\n  const {\r\n    settingsWrapper,\r\n    field,\r\n    shuffleButton\r\n  } = useStyles();\r\n\r\n  return (\r\n    <div\r\n      className={`${settingsWrapper}`}\r\n    >\r\n      <div className={field}>\r\n        <input\r\n          type='checkbox'\r\n          name='showHint'\r\n          checked={showHints}\r\n          onChange={(e) => handleHintsChange(e.target.checked)}\r\n        />\r\n        <label htmlFor='showHint'>\r\n          Show number hints?\r\n        </label>\r\n      </div>\r\n      <div className={field}>\r\n        <input\r\n          type='range'\r\n          min={2}\r\n          max={10}\r\n          placeholder={puzzleSize.toString()}\r\n          name='puzzleSize'\r\n          onChange={(e) => handleSizeChange(parseInt(e.target.value))}\r\n          ref={sizeSlider}\r\n        />\r\n        <label htmlFor='puzzleSize'>\r\n          Puzzle Size\r\n      </label>\r\n      </div>\r\n\r\n      <div\r\n        className={shuffleButton}\r\n        onClick={handleShuffle}\r\n      >\r\n        shuffle!\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Settings;\r\n","import { createUseStyles } from 'react-jss'\r\n\r\nconst useStyles = createUseStyles({\r\n  galleryContainer: {\r\n    width: '100%',\r\n    height: '100%',\r\n    position: 'relative'\r\n  },\r\n  galleryItem: {\r\n    position: 'absolute',\r\n    overflow: 'hidden',\r\n    cursor: 'pointer',\r\n    zIndex: 2,\r\n  },\r\n  hidden: {\r\n    zIndex: -1,\r\n    opacity: 0\r\n  }\r\n})\r\n\r\nexport default useStyles;\r\n","import React, { ReactElement, useRef, useState, useEffect } from 'react';\r\n\r\nimport { motion } from 'framer-motion'\r\n\r\nimport useStyles from './styles';\r\n\r\nexport type ISquaredGalleryElementData = {\r\n  id: string,\r\n  order: number,\r\n  element: ReactElement,\r\n  hidden?: boolean\r\n}\r\n\r\ninterface IGalleryProps {\r\n  columns: number,\r\n  elements: ISquaredGalleryElementData[],\r\n  containerSize?: number,\r\n}\r\n\r\nconst SquaredGallery = ({ columns, elements, containerSize }: IGalleryProps) => {\r\n  const containerElement = useRef<HTMLUListElement>(null);\r\n  const [columnSize, setColumnSize] = useState<number>(0) \r\n\r\n  const {\r\n    galleryContainer,\r\n    galleryItem,\r\n    hidden\r\n  } = useStyles();\r\n\r\n  \r\n  useEffect(()=>{\r\n    if(containerSize && containerElement.current) {\r\n      setColumnSize(containerSize / columns)\r\n    } else {\r\n      if (containerElement.current) setColumnSize(containerElement.current.offsetWidth)\r\n    };\r\n  }, [containerSize, columns])\r\n\r\n  return (\r\n    <ul\r\n      className={galleryContainer}\r\n      ref={containerElement}\r\n    >\r\n      {\r\n        elements.map((element) => (\r\n          element &&\r\n          <motion.li\r\n            key={element.id}\r\n            id={element.id}\r\n            className={`${galleryItem} ${element.hidden ? hidden : ''}`}\r\n            transition={{\r\n              duration: 0.2,\r\n            }}\r\n            animate={{\r\n              width: columnSize,\r\n              height: columnSize,\r\n              top: (Math.floor(element.order / columns) * columnSize),\r\n              left: (element.order % columns) * columnSize,\r\n            }}\r\n          >\r\n            {\r\n              element.element\r\n            }\r\n          </motion.li>\r\n        ))\r\n      }\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default SquaredGallery;\r\n","import React from 'react';\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store/store\";\r\n\r\nimport useStyles from './styles';\r\nimport { SlidePuzzle, Settings } from './components/';\r\n\r\nfunction App() {\r\n  const {\r\n    AppContainer,\r\n    AppTitle\r\n  } = useStyles();\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <div className={AppContainer}>\r\n        <h1 className={AppTitle}>\r\n          nPiece Slide Puzzle\r\n        </h1>\r\n        <SlidePuzzle />\r\n        <Settings />\r\n      </div>\r\n    </Provider >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@kidmanuel/kidreset/reset.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}