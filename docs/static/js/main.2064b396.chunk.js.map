{"version":3,"sources":["store/defaults.ts","store/reducers.ts","store/actionTypes.ts","store/store.ts","styles.ts","components/PuzzlePiece/styles.ts","components/PuzzlePiece/PuzzlePiece.tsx","common/nPiecePuzzleUtility.ts","store/selectors.ts","store/actions.ts","components/SlidePuzzle/styles.ts","components/SlidePuzzle/SlidePuzzle.tsx","components/Settings/styles.ts","components/Settings/Settings.tsx","components/SquaredGallery/styles.ts","components/SquaredGallery/SquaredGallery.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["puzzleStateDefault","pieces","key","position","x","y","activePiecePosition","adjacentToActive","isSolved","userConfigDefault","showHints","size","combineReducers","userConfigurationReducer","state","action","type","puzzleReducer","payload","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","useStyles","createUseStyles","AppContainer","display","flexWrap","justifyContent","alignItems","width","height","backgroundColor","puzzlePiece","placeItems","transition","borderRadius","opacity","overflow","active","adjacent","content","contentContainer","top","left","fontSize","fontWeight","color","userSelect","PuzzlePiece","pos","movePieceCallback","image","isAdjacentPiece","isActivePiece","className","onClick","e","shufflePieces","board","newPositions","length","push","shuffledPositions","shuffle","newBoard","map","element","index","isBoardSolvable","makeBoardSolvable","getFullBoardData","newActivePieceIndex","findActivePieceInBoard","findAdjacentsToActive","isBoardSolved","keyOnePosition","findIndex","keyTwoPosition","swapTwoPieces","forEach","Math","sqrt","adjacents","isOdd","number","activePiece","boardInversions","invCount","i","j","getInversionsInBoard","areBoardInversionsOdd","activePieceRow","pieceA","pieceB","newPiecePositions","pieceKey","activePieceKey","getPieces","store","getActivePiece","getAdjacentToActive","boardStateAction","newState","slidePuzzle","border","textTransform","margin","bottom","right","zIndex","textAlign","transform","pointerEvents","solvedPuzzle","SlidePuzzle","dispatch","showNumbers","useDispatch","useSelector","selectors","newPieces","piece","movePiece","newAdjacents","isCurrentBoardSolved","useEffect","columns","elements","id","order","hidden","toString","includes","settingsWrapper","padding","field","shuffleButton","cursor","Settings","props","name","htmlFor","min","max","galleryContainer","galleryItem","SquaredGallery","containerElement","useRef","useState","containerSize","setContainerSize","throttledUpdate","useCallback","throttle","updateSize","useLayoutEffect","addEventListener","current","offsetWidth","columnSize","ref","li","duration","animate","floor","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2064b396.chunk.js","sourcesContent":["import { IPuzzleState } from '../common/interfaces';\r\n\r\ninterface IUserConfiguration {\r\n  showHints: boolean,\r\n  size: number\r\n}\r\n\r\nexport const puzzleStateDefault: IPuzzleState = {\r\n  pieces: [\r\n    { key: 0, position: { x: 0, y: 0 } },\r\n    { key: 1, position: { x: 1, y: 0 } },\r\n    { key: 2, position: { x: 2, y: 0 } },\r\n    { key: 3, position: { x: 3, y: 0 } },\r\n    { key: 4, position: { x: 0, y: 1 } },\r\n    { key: 5, position: { x: 1, y: 1 } },\r\n    { key: 6, position: { x: 2, y: 1 } },\r\n    { key: 7, position: { x: 3, y: 1 } },\r\n    { key: 8, position: { x: 0, y: 2 } },\r\n    { key: 9, position: { x: 1, y: 2 } },\r\n    { key: 10, position: { x: 2, y: 2 } },\r\n    { key: 11, position: { x: 3, y: 2 } },\r\n    { key: 12, position: { x: 0, y: 3 } },\r\n    { key: 13, position: { x: 1, y: 3 } },\r\n    { key: 14, position: { x: 2, y: 3 } },\r\n    { key: 15, position: { x: 3, y: 3 } }\r\n  ],\r\n  activePiecePosition: 15,\r\n  adjacentToActive: [11, 14],\r\n  isSolved: false\r\n}\r\n\r\nexport const userConfigDefault: IUserConfiguration = {\r\n  showHints: true,\r\n  size: 4\r\n} \r\n","import { combineReducers } from \"redux\";\r\n\r\nimport * as types from './actionTypes'\r\nimport { IMoveActivePieceAction, IUpdateUserConfigAction } from './actions'\r\nimport { puzzleStateDefault, userConfigDefault } from './defaults'\r\nimport { IPuzzleState, IUserConfig } from '../common/interfaces';\r\n\r\nconst puzzleReducer = (state: IPuzzleState = puzzleStateDefault, action: IMoveActivePieceAction) => {\r\n  switch (action.type) {\r\n    case types.MOVE_ACTIVE: {\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst userConfigurationReducer = (state: IUserConfig = userConfigDefault, action: IUpdateUserConfigAction) => {\r\n  switch (action.type) {\r\n    case types.USER_CONFIGURATION: {\r\n      return {\r\n        ...state\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default combineReducers({ userConfigurationReducer, puzzleReducer });\r\n","export const PIECES_UPDATE = \"PIECES_UPDATE\";\r\nexport const MOVE_ACTIVE = \"MOVE_ACTIVE\";\r\nexport const USER_CONFIGURATION = \"USER_CONFIGURATION\";\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\nimport { IPuzzleState } from '../common/interfaces';\r\n\r\nexport interface IFullStoreState {\r\n  puzzleReducer: IPuzzleState\r\n}\r\n\r\nexport default createStore(rootReducer, (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__());\r\n","import { createUseStyles } from 'react-jss'\n\nconst useStyles = createUseStyles({\n  AppContainer: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100vw',\n    height: '100vh',\n    backgroundColor: '#1D4E89',\n  }\n})\n\nexport default useStyles;\n","import { createUseStyles } from 'react-jss'\r\n\r\nconst useStyles = createUseStyles({\r\n  puzzlePiece: {\r\n    width: '100%',\r\n    height: '100%',\r\n    backgroundColor: '#FBD1A2',\r\n    display: 'grid',\r\n    placeItems: 'center',\r\n    transition: 'all 0.3s',\r\n    position: 'relative',\r\n    borderRadius: 6,\r\n    opacity: 1,\r\n    overflow: 'hidden'\r\n  },\r\n  active: {\r\n    opacity: 0\r\n  },\r\n  adjacent: {\r\n    '&:after': {\r\n      width: '100%',\r\n      height: '100%',\r\n      position: 'absolute',\r\n      backgroundColor: 'rgba(255, 255, 255, 0.0)',\r\n      content: '\"\"',\r\n      display: \"block\",\r\n      transition: 'background-color 0.4s'\r\n    },\r\n    '&:hover:after': {\r\n      backgroundColor: 'rgba(255, 255, 255, 0.5)',\r\n    }\r\n  },\r\n  contentContainer: {\r\n    position: 'absolute',\r\n    top: 20,\r\n    left: 20,\r\n    fontSize: 15,\r\n    fontWeight: 700,\r\n    backgroundColor: '#00B2CA',\r\n    borderRadius: 20,\r\n    width: 40,\r\n    height: 40,\r\n    display: 'grid',\r\n    placeItems: 'center',\r\n    color: 'white',\r\n    userSelect: 'none'\r\n  }\r\n})\r\n\r\nexport default useStyles;\r\n","import React, { MouseEvent } from 'react'\r\n\r\nimport useStyles from './styles';\r\n\r\ninterface IPuzzlePieceProps {\r\n  pos: number,\r\n  content: string,\r\n  movePieceCallback: (x: number) => void,\r\n  isActivePiece: boolean,\r\n  isAdjacentPiece: boolean,\r\n  image?: string,\r\n}\r\n\r\nconst PuzzlePiece = ({ pos, content, image, movePieceCallback, isAdjacentPiece, isActivePiece }: IPuzzlePieceProps) => {\r\n  const handleClick = (e: MouseEvent) => {\r\n    if (isAdjacentPiece) movePieceCallback(pos);\r\n  }\r\n\r\n  const {\r\n    puzzlePiece,\r\n    adjacent,\r\n    active,\r\n    contentContainer\r\n  } = useStyles();\r\n\r\n  return (\r\n    <div\r\n      className={`${puzzlePiece} ${isAdjacentPiece && adjacent}  ${isActivePiece && active}`}\r\n      onClick={handleClick}\r\n    >\r\n      <div\r\n        className={contentContainer}\r\n      >\r\n        {\r\n          content\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PuzzlePiece;\r\n","import { IPieceState, IXYPosition, IPuzzleState } from './interfaces'\r\nimport { shuffle } from 'lodash'\r\n\r\nexport const shufflePieces = (board: IPieceState[], size?: number): IPieceState[] => {\r\n  const newPositions = [];\r\n  for (let e = 0; e < board.length; e++) newPositions.push(e)\r\n  const shuffledPositions = shuffle(newPositions);\r\n  const newBoard = board.map((element, index) => {\r\n    return { ...element, key: shuffledPositions[index] }\r\n  });\r\n\r\n  if (!isBoardSolvable(newBoard)) {\r\n    return (makeBoardSolvable(newBoard, size));\r\n  }\r\n\r\n  return newBoard;\r\n}\r\n\r\nexport const getFullBoardData = (board: IPieceState[], size?: number): IPuzzleState => {\r\n  const newActivePieceIndex = findActivePieceInBoard(board);\r\n\r\n  return {\r\n    pieces: board,\r\n    adjacentToActive: findAdjacentsToActive(board, newActivePieceIndex, size),\r\n    activePiecePosition: newActivePieceIndex,\r\n    isSolved: isBoardSolved(board)\r\n  }\r\n}\r\n\r\nconst makeBoardSolvable = (board: IPieceState[], size?: number): IPieceState[] => {\r\n  const keyOnePosition = board.findIndex(element => element.key == 1);\r\n  const keyTwoPosition = board.findIndex(element => element.key == 2);\r\n  return swapTwoPieces(board, keyOnePosition, keyTwoPosition, size)\r\n}\r\n\r\nexport const isBoardSolved = (board: IPieceState[]): boolean => {\r\n  let isSolved = true;\r\n  board.forEach((element, index) => {\r\n    if (element.key !== index) {\r\n      isSolved = false;\r\n    }\r\n  })\r\n\r\n  return isSolved;\r\n}\r\n\r\nexport const findActivePieceInBoard = (board: IPieceState[]): number => {\r\n  return board.findIndex(e => e.key === board.length - 1);\r\n}\r\n\r\nexport const findAdjacentsToActive = (board: IPieceState[], activePiecePosition?: number, size?: number): number[] => {\r\n  size = size || Math.sqrt(board.length);\r\n  activePiecePosition = activePiecePosition ? activePiecePosition : findActivePieceInBoard(board);\r\n  const newActivePieceIndex = findActivePieceInBoard(board);\r\n  const { x, y } = board[activePiecePosition].position;\r\n  const adjacents = [];\r\n\r\n  // If not on top row, add the cell directly above. \r\n  if (y > 0) {\r\n    adjacents.push(newActivePieceIndex - size)\r\n  }\r\n  // Bottom\r\n  if (y < size - 1) {\r\n    adjacents.push(newActivePieceIndex + size)\r\n  }\r\n  // Right\r\n  if (!((x % size) === size - 1)) {\r\n    adjacents.push(newActivePieceIndex + 1)\r\n  }\r\n  //Left\r\n  if (x % size) {\r\n    adjacents.push(newActivePieceIndex - 1)\r\n  }\r\n\r\n  return adjacents\r\n}\r\n\r\nconst getInversionsInBoard = (board: IPieceState[]): number => {\r\n  let invCount = 0;\r\n  for (let i = 0; i < board.length; i++) {\r\n    for (let j = i + 1; j < board.length; j++) {\r\n      if (board[i] > board[j]) invCount++\r\n    }\r\n  }\r\n  return invCount;\r\n}\r\n\r\nconst isOdd = (number: number): boolean => {\r\n  return !!(number % 2)\r\n}\r\n\r\nconst isBoardSolvable = (board: IPieceState[], activePiecePosition?: number, size?: number): boolean => {\r\n  size = size || Math.sqrt(board.length);\r\n  const activePiece = activePiecePosition ? board[activePiecePosition] : board[findActivePieceInBoard(board)];\r\n  const boardInversions = getInversionsInBoard(board);\r\n  const areBoardInversionsOdd = isOdd(boardInversions);\r\n  const activePieceRow = activePiece.position.y + 1;\r\n\r\n  if (isOdd(size)) {\r\n    if (!isOdd(boardInversions)) return true;\r\n  } else {\r\n    if (isOdd(size - activePieceRow)) {\r\n      if (areBoardInversionsOdd) return true;\r\n    } else {\r\n      if (!areBoardInversionsOdd) return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nconst swapTwoPieces = (board: IPieceState[], pieceA: number, pieceB: number, size?: number): IPieceState[] => {\r\n  size = size || Math.sqrt(board.length);\r\n\r\n  const newPiecePositions = [...board];\r\n\r\n  // Switch two piece positions\r\n  const pieceKey = newPiecePositions[pieceA].key;\r\n  const activePieceKey = newPiecePositions[pieceB].key;\r\n\r\n  newPiecePositions[pieceB].key = pieceKey;\r\n  newPiecePositions[pieceA].key = activePieceKey;\r\n\r\n  return newPiecePositions;\r\n}\r\n\r\nexport const movePiece = (board: IPieceState[], piece: number, activePiecePosition?: number, size?: number): IPieceState[] => {\r\n  activePiecePosition = activePiecePosition ? activePiecePosition : findActivePieceInBoard(board);\r\n  size = size || Math.sqrt(board.length);\r\n\r\n  return swapTwoPieces(board, piece, activePiecePosition, size);\r\n}\r\n\r\nexport const getXYFromPosition = (position: number, size: number): IXYPosition => {\r\n  return {\r\n    x: position % size,\r\n    y: Math.floor(position / size)\r\n  }\r\n}\r\n","import { IFullStoreState } from './store';\r\n\r\nexport const getPieces = (store: IFullStoreState) => store.puzzleReducer.pieces;\r\nexport const getActivePiece = (store: IFullStoreState) => store.puzzleReducer.activePiecePosition;\r\nexport const getAdjacentToActive = (store: IFullStoreState) => store.puzzleReducer.adjacentToActive;\r\nexport const isSolved = (store: IFullStoreState) => store.puzzleReducer.isSolved;\r\n","import { IPuzzleState, IUserConfig } from '../common/interfaces';\r\n\r\nimport * as types from './actionTypes'\r\n\r\ninterface IBasicAction {\r\n  type: string\r\n}\r\n\r\nexport interface IMoveActivePieceAction extends IBasicAction {\r\n  payload: IPuzzleState\r\n}\r\n\r\nexport interface IUpdateUserConfigAction extends IBasicAction {\r\n  payload: IUserConfig\r\n}\r\n\r\nexport const boardStateAction = (newState: IPuzzleState): IMoveActivePieceAction => {\r\n\r\n  // TODO change action name\r\n  return {\r\n    type: types.MOVE_ACTIVE,\r\n    payload: newState\r\n  }\r\n}\r\n\r\n\r\nexport const userConfigAction = (newConfig: IUserConfig): IUpdateUserConfigAction => {\r\n  return {\r\n    type: types.MOVE_ACTIVE,\r\n    payload: newConfig\r\n  }\r\n}\r\n","import { createUseStyles } from 'react-jss'\r\n\r\nconst useStyles = createUseStyles({\r\n  slidePuzzle: {\r\n    width: '90vmin',\r\n    height: '90vmin',\r\n    border: 'solid 0px white',\r\n    transition: 'all 0.4s',\r\n    position: 'relative',\r\n    '&:before': {\r\n      content: '\"you solved it my dude!\"',\r\n      textTransform: 'uppercase',\r\n      position: 'absolute',\r\n      margin: 'auto',\r\n      top: 0,\r\n      bottom: 0,\r\n      left: 0,\r\n      right: 0,\r\n      color: 'white',\r\n      fontSize: 80,\r\n      fontWeight: 700,\r\n      width: '50%',\r\n      height: '50%',\r\n      display: 'grid',\r\n      placeItems: 'center',\r\n      zIndex: 3,\r\n      transition: 'all 0.4s',\r\n      textAlign: 'center',\r\n      opacity: 0,\r\n      transform: 'rotate(-120deg)',\r\n      backgroundColor: '#F79256',\r\n      borderRadius: 30,\r\n      pointerEvents: 'none'\r\n    },\r\n  },\r\n  solvedPuzzle: {\r\n    '&:before': {\r\n      opacity: 1,\r\n      transform: 'rotate(-10deg)',\r\n    }\r\n  }\r\n})\r\n\r\nexport default useStyles;\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport {\r\n  movePiece,\r\n  findAdjacentsToActive,\r\n  isBoardSolved,\r\n  getFullBoardData,\r\n  shufflePieces\r\n} from '../../common/nPiecePuzzleUtility'\r\nimport * as selectors from '../../store/selectors';\r\nimport { boardStateAction } from '../../store/actions';\r\nimport { PuzzlePiece, SquaredGallery, IGalleryElement } from '../'\r\n\r\nimport useStyles from './styles';\r\n\r\ninterface IPuzzleProps {\r\n  size: number,\r\n  showNumbers: boolean,\r\n}\r\n\r\nconst SlidePuzzle = ({ size, showNumbers }: IPuzzleProps) => {\r\n  const dispatch = useDispatch();\r\n  const pieces = useSelector(selectors.getPieces);\r\n  const activePiecePosition = useSelector(selectors.getActivePiece);\r\n  const adjacentToActive = useSelector(selectors.getAdjacentToActive);\r\n  const isSolved = useSelector(selectors.isSolved);\r\n\r\n  const {\r\n    slidePuzzle,\r\n    solvedPuzzle\r\n  } = useStyles();\r\n\r\n  const movePieceCallback = (x: number): void => {\r\n    const newPieces = movePiece(pieces, x, activePiecePosition, size);\r\n    const newAdjacents = findAdjacentsToActive(newPieces, x, size);\r\n    const isCurrentBoardSolved = isBoardSolved(newPieces)\r\n\r\n    dispatch(boardStateAction({\r\n      pieces: newPieces,\r\n      activePiecePosition: x,\r\n      adjacentToActive: newAdjacents,\r\n      isSolved: isCurrentBoardSolved\r\n    }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(boardStateAction(getFullBoardData(shufflePieces(pieces))))\r\n  }, [])\r\n\r\n  /*\r\n  const prepUnshuffledPieces = (): IPieceState[] => {\r\n    const totalPieces = size * size;\r\n    const newPieces = [];\r\n    for (let n = 0; n < totalPieces; n++) {\r\n      const newPiece = {\r\n        key: n,\r\n        position: getXYFromPosition(n)\r\n      }\r\n      newPieces.push(newPiece)\r\n    }\r\n    return newPieces;\r\n  }\r\n  */\r\n\r\n  const formGalleryElements = (): IGalleryElement[] => {\r\n    return pieces.map((element, index) => {\r\n      const { key } = element;\r\n      const isActivePiece = (index === activePiecePosition);\r\n      return {\r\n        id: `element${key}`,\r\n        order: index,\r\n        hidden: isActivePiece,\r\n        element: (\r\n          <PuzzlePiece\r\n            pos={index}\r\n            content={(element.key + 1).toString()}\r\n            movePieceCallback={movePieceCallback}\r\n            isActivePiece={isActivePiece}\r\n            isAdjacentPiece={adjacentToActive.includes(index)}\r\n          />\r\n        )\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`${slidePuzzle} ${isSolved ? solvedPuzzle : null}`}\r\n    >\r\n      <SquaredGallery\r\n        columns={size}\r\n        elements={formGalleryElements()}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default SlidePuzzle;\r\n","import { createUseStyles } from 'react-jss'\r\n\r\nconst useStyles = createUseStyles({\r\n  settingsWrapper: {\r\n    padding: 30,\r\n    color: 'white'\r\n  },\r\n  field: {\r\n    margin: '30px 0'\r\n  },\r\n  shuffleButton: {\r\n    padding: '20px 40px',\r\n    backgroundColor: '#7DCFB6',\r\n    textAlign: 'center',\r\n    textTransform: 'uppercase',\r\n    fontSize: 30,\r\n    fontWeight: 700,\r\n    borderRadius: 2,\r\n    userSelect: 'none',\r\n    cursor: 'pointer'\r\n  },\r\n})\r\n\r\nexport default useStyles;\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { boardStateAction } from '../../store/actions'\r\nimport { getPieces } from '../../store/selectors'\r\nimport { shufflePieces, getFullBoardData } from '../../common/nPiecePuzzleUtility'\r\nimport useStyles from './styles';\r\n\r\ninterface ISettingsProps {\r\n}\r\n\r\nconst Settings = (props: ISettingsProps) => {\r\n  const dispatch = useDispatch();\r\n  const pieces = useSelector(getPieces);\r\n\r\n  const handleShuffle = () => {\r\n    dispatch(boardStateAction(getFullBoardData(shufflePieces(pieces))))\r\n  }\r\n\r\n  const {\r\n    settingsWrapper,\r\n    field,\r\n    shuffleButton\r\n  } = useStyles();\r\n\r\n  return (\r\n    <div\r\n      className={`${settingsWrapper}`}\r\n    >\r\n      <div className={field}>\r\n        <input\r\n          type='checkbox'\r\n          name='showHint'\r\n        />\r\n        <label htmlFor='showHint'>\r\n          Show number hints?\r\n        </label>\r\n      </div>\r\n      <div className={field}>\r\n        <input\r\n          type='range'\r\n          min={2}\r\n          max={10}\r\n          name='puzzleSize'\r\n        />\r\n        <label htmlFor='puzzleSize'>\r\n          Puzzle Size\r\n      </label>\r\n      </div>\r\n\r\n      <div\r\n        className={shuffleButton}\r\n        onClick={handleShuffle}\r\n      >\r\n        shuffle!\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Settings;\r\n","import { createUseStyles } from 'react-jss'\r\n\r\nconst useStyles = createUseStyles({\r\n  galleryContainer: {\r\n    width: '100%',\r\n    height: '100%',\r\n    position: 'relative'\r\n  },\r\n  galleryItem: {\r\n    position: 'absolute',\r\n    overflow: 'hidden',\r\n    cursor: 'pointer',\r\n    zIndex: 2,\r\n  },\r\n  hidden: {\r\n    zIndex: -1\r\n  }\r\n})\r\n\r\nexport default useStyles;\r\n","import React, { ReactElement, useRef, useLayoutEffect, useState, useCallback } from 'react';\r\nimport { throttle } from 'lodash'\r\n\r\nimport { motion } from 'framer-motion'\r\n\r\nimport useStyles from './styles';\r\n\r\nexport type ISquaredGalleryElementData = {\r\n  id: string,\r\n  order: number,\r\n  element: ReactElement,\r\n  hidden?: boolean\r\n}\r\n\r\ninterface IGalleryProps {\r\n  columns: number,\r\n  elements: ISquaredGalleryElementData[],\r\n}\r\n\r\nconst SquaredGallery = ({ columns, elements }: IGalleryProps) => {\r\n  const containerElement = useRef<HTMLUListElement>(null);\r\n  const [containerSize, setContainerSize] = useState<number>(0)\r\n\r\n  const {\r\n    galleryContainer,\r\n    galleryItem,\r\n    hidden\r\n  } = useStyles();\r\n\r\n  const throttledUpdate = useCallback(throttle(() => {\r\n    updateSize()\r\n  }, 200), [])\r\n\r\n  useLayoutEffect(() => {\r\n    updateSize();\r\n\r\n    const handleResize = () => {\r\n      throttledUpdate()\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize)\r\n  }, [])\r\n\r\n  const updateSize = () => {\r\n    setContainerSize(containerElement.current?.offsetWidth || 0);\r\n  }\r\n\r\n  const columnSize = containerSize / columns;\r\n\r\n  return (\r\n    <ul\r\n      className={galleryContainer}\r\n      ref={containerElement}\r\n    >\r\n      {\r\n        elements.map((element) => (\r\n          element &&\r\n          <motion.li\r\n            key={element.id}\r\n            id={element.id}\r\n            className={`${galleryItem} ${element.hidden ? hidden : ''}`}\r\n            transition={{\r\n              duration: 0.2,\r\n            }}\r\n            animate={{\r\n              width: columnSize,\r\n              height: columnSize,\r\n              top: (Math.floor(element.order / columns) * columnSize),\r\n              left: (element.order % columns) * columnSize,\r\n            }}\r\n          >\r\n            {\r\n              element.element\r\n            }\r\n          </motion.li>\r\n        ))\r\n      }\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default SquaredGallery;\r\n","import React from 'react';\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store/store\";\r\n\r\nimport useStyles from './styles';\r\nimport { SlidePuzzle, Settings } from './components/';\r\n\r\nfunction App() {\r\n  const {\r\n    AppContainer\r\n  } = useStyles();\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <div className={AppContainer}>\r\n        <SlidePuzzle\r\n          size={4}\r\n          showNumbers={true}\r\n        />\r\n        <Settings />\r\n      </div>\r\n    </Provider >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@kidmanuel/kidreset/reset.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}